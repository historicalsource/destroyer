DVELP	=1		;SET DEVELOPMENT FLAG
	.TITLE DEPTH
	.SBTTL DEFINITIONS
	.RADIX 16
	.ASECT
INPUT	=1000		;8 SWITCHES
VBLANK	=INPUT+1	;ANOTHER 8 SWITCHES
OUTBIT	=INPUT			;BIT 0 OUTPUT
OUTBYT	=OUTBIT+8		;BITS 0-5 OUTPUT
;D0=ATTRACT,D1=KICKER,D2=MOTOR SPEED,D3=POT MASK0
;D4=WAVEMOD,D5=POT MASK1
ATTRACT	=OUTBIT+8
CRDLMP	=OUTBIT
SONGAT	=OUTBIT+2
LAUNCH	=OUTBIT+3
EXPLO	=OUTBIT+4
SONAR	=OUTBIT+5
HIEXP	=OUTBIT+6
LOEXP	=OUTBIT+7
OPTSEL  =2000			;OPTION SWITCHES
SCREEN	=3000			;ALPHA NUMERICS,
MAJOBJ	=4000			;16 WORDS, ATRIB,HPOSN
MINOBJ	=5000
WTCHDG	=MINOBJ
CURSOR	=MINOBJ
INTACK	=MINOBJ+1
PICTO	=MINOBJ+2		;2BYTES,2 OBJECTS
HLOAD	=MINOBJ+4
VLOAD	=MINOBJ+6
VSYNC	=6000			;V-SYNC SIGNALS
SWIV	=0FFFA
GAME2	=7400
	.IF	DF,DVELP
SWIENT	=0FC08
NIOA	=0F7A1
IOVA	=0F7A4
RSTVCT	=0F78E
	.IFF
NIOA	=0FFFC
IOVA	=0FFF8
RSTVCT	=0FFFE
	.ENDC
NTARGS	=2			;# OF TARGETS
BUFLEN	=18			;LENGTH OF OUTPUT BUFFER
SDEPTH	=30			;STACK DEPTH
DDEPTH	=4			;'DEPTH' OF DESTROYER
TUMBLE  =4
EXP1	=3
.SCR1	=4		;"SCORE" BY ITSELF
.SCR2	=5		;"SCORE" IN "HIGH SCORE"
.TIM	=6		;"TIME"
.HI	=7		;"HIGH"
.EP	=8		;"EXTENDED PLAY"
.FOR	=9		;"FOR"
.GO	=10.		;"GAME OVER"

	.SBTTL ZERO PAGE
	.BLKB SDEPTH
STACK	=.-1			;STACK GROWS DOWN
MAJATR:	.BLKB 1			;ATTRIB BYTE, MAJOBJ0 (DD)
;D3=MIRROR,	D2=WINDOW,	D1,0=TYPE
MAJHP:	.BLKB 1			;HORIZ. POS,MAJOBJ0
	.BLKB 20.		;ATTRIB.,H.P FOR OTHER 10  MAJOBJ'S
MINPCT:	.BLKB 4			;PICTURE CODE FOR MINOR OBJ
MINHP:	.BLKB 4			;HORIZ. POSN FOR MINOR OBJ
MINVP:	.BLKB 4			;VERT. POSN FOR MINOR OBJ
SRCPTR:	.BLKB 2			;POINTER TO SOURCE OF TEXT
DSTPTR:	.BLKB 2			;POINTER TO DEST. OF TEXT
TYPCNT:	.BLKB 1			;COUNT OF MESSAGE (OR '4' FOR INDEFINITE LENGTH)
OUTPTR:	.BLKB 1			;NEXT OUTPUT FROM CIRC. BUFFER
BCNT:	.BLKB 1			;# OF ENTRIES IN CIRC. BUFFER
INPTR:	.BLKB 1			;NEXT INPUT TO CIRC.BUFFER
NUMBUF:	.BLKB 4			;BUFFER FOR BCD LITERALS
SPT:	.BLKB 2			;STACK PTR. TEMP. SAVE AREA
TIME:  .BLKB 1			;FRAME COUNTER
OTIME:  .BLKB 1			;OLD TIME
COINCT:	.BLKB 1			;COINS
CREDIT:	.BLKB 1			;CREDITS
SWSTAT:	.BLKB 8
CNSTAT	=SWSTAT+4
TSTSW	=SWSTAT+3
RELSE	=SWSTAT+2
DDSPD	=SWSTAT+1
STRTSW	=SWSTAT+6
SLSTAT  =SWSTAT
MSGBUF:	.BLKW BUFLEN
EXPLVL:	.BLKB	1		;EXPLOSION LEVEL
RELSPC:	.BLKB	1		;'SPACE' BETWEEN D.C. RELEASES
TARGAT:	.BLKB	NTARGS		;TARGET ATTRIB.
DDAT:	.BLKB	1		;DESTROYER ATTRIB.
TARGHP:	.BLKB	NTARGS		;HORIZ POSN
DDHP:	.BLKB	1
TARGHL:	.BLKB	NTARGS		;LOW BITS OF HORIZ POSN
DDHL:	.BLKB	1
TARGVL:	.BLKB	NTARGS		;TARGET VEL.
DDVEL:	.BLKB	1
TARGD:	.BLKB	NTARGS		;TARGET DEPTH
TARGEX: .BLKB	NTARGS		;TARGET EXPLOSION TIMER
DCVSPD:	.BLKB	4		;DEPTH CHG VERT. SPEED
DCHSPD:	.BLKB	4		;D.C. HORIZ. SPEED
DCEXPD:	.BLKB	4		;DC. EXPLOSION DEPTH
DCSCR:	.BLKB	4		;D.C. SCORE VALUE
DCSVP:	.BLKB	4		;D.C. SCORE VERT. POSN.
DCSHP:	.BLKB	4		;D.C.SCORE HORIZ.POSN
	.BLKB	3		;TRASH
PING:	.BLKB	1		;# OF FRAMES REMAINING IN PING SOUND
BOOM:	.BLKB	1		;# OF FRAMES REMAINING IN BOOM SOUND
BANG:	.BLKB	1		;# OF FRAMES REMAINING IN BANG SOUND
	.BLKB	2		;OLD PING & BOOM
OBANG:	.BLKB	1		;OLD BANG
PSSST:	.BLKB	1		;# OF FRAMES REMAINING IN PSSST SOUND
ROBYT:	.BLKB	1		;RAM COPY OF OUTBYT
KICKER: .BLKB	1		;1 MEANS HIT KICKER
SCORE:	.BLKB	2
FRDIV:  .BLKB	1		;FRAME DIVIDER
DTIME:	.BLKB	1		;DISPLAY TIME
PLAY:	.BLKB	1		;-=PLAY,0=ATT,+=CREDIT WAIT
GOTM:	.BLKB	1		;'GAME OVER' TIMER
EPFLAG: .BLKB	1		;NON-ZERO IN EXTENDED PLAY
POTVAL: .BLKB	1		;POT VALUE
NMFLAG:	.BLKB	2		;NMI FLAG
DDENG:	.BLKB	1		;DESTROYER ENGINE SPEED
HISCR:  .BLKB	2
PFLAG:  .BLKB	1
ACTIVE:	.BLKB	2
VBOSC:	.BLKB	1		;V-BLANKING OSC.(FOR TDM OF CHARGES)
MLCNT:	.BLKB	1		;MAINLINE COUNT
MLDST:	.BLKB	1		;MAINLINE DESTINATION
MLSRC:	.BLKB	2		;MAINLINE SOURCE
SBXR:	.BLKB	2		;SUBROUTINE X-REG SAVE
SBXR2:  .BLKB   2
SBXR3:  .BLKB	2
SBXR4:	.BLKB	2
MLXR:	.BLKB	2		;MAINLINE X-REG BUILD AREA
IRXR:	.BLKB	2		;INT RTN. X:REG BUILD AREA
CLXR:	.BLKB	2		;POINTER TO MAJOBJ RAM, FOR CLEAR
CHGHP:	.BLKB	1		;CHARGE HORIZ POSN (IN EXPCHK)
CHGVP:	.BLKB	1		;  "    VERT   "     "   "
TARGHT:	.BLKB	1		;TARG. H.POSN (IN EXPCHK)
TARGVT:	.BLKB	1		;TARG. V.POSN (IN EXPCHK)
J:	.BLKB	1		;BUCKET
POINTS:	.BLKB	1
SPINR:  .BLKB	1		;SPINNER FOR CHEAP RANDOM #
RFTIM:  .BLKB	1		;REFRESH TIME FOR ATTRACT
LTD:	.BLKB	1		;LAST TARGET DIRECTION

	.IF	DF,DVELP
	.=	7200
	.SBTTL DVELP ENTRY POINT
START:	LDX	I,INTEN
	STX	E,IOVA
	LDX	I,NMINT
	STX	E,NIOA
	JMP	RESET
	.ENDC
	.=	7800
	.SBTTL INTERRUPT
INTEN:	STAA	E,INTACK		;SHUT OFF ALARM
	LDAB	E,VBLANK		;SEE WHO WOKE US UP
	BPL	REGINT			;NOT V-BLANKING
	LDAA	D,EXPLVL
	STAA	E,CURSOR
	LDX	I,0			;ASSUME FIRST SET
	COM	VBOSC			;CHECK V-BLANK OSC.
	BPL	1$			;IF + USE FIRST SET
	INX				;ELSE BUMP
	INX				;TO SECOND SET
1$:	STX	D,IRXR			;SAVE FOR FUTURE REF.
	LDAA	I,8			;POT MASK 0
	ORAA	D,ROBYT			;MIX WITH OTHER STUFF
	LDAB	D,NMFLAG		;SEE IF NMI WAS HERE
	BNE	2$			;IF HE WAS, PROCEED
	LDAB	I,0FF			;ELSE SET POTVAL TO FF
	STAB	D,POTVAL			;WITHOUT DISTURBING ANY REGS
2$:	LSR	E,KICKER		;CHECK FOR KICKER REQUESTS
	BCS	3$			;YES, SET 0 FOR A WHILE
	ORAA	I,2			;ELSE SET 1 (NO KICK)
3$:	STAA	E,OUTBYT		;ENABLE POT
	ORAA	I,2			;"CLEAR" KICKER BIT,IF ON
	STAA	E,OUTBYT		;RESET KICKER
	STX	D,NMFLAG		;RESET FLAG
	LDX	X,MINVP			;WE CONTROL THE VERTICAL
	STX	E,VLOAD			;MAINTAIN SYNC
	INC	E,TIME
4$:	JSR	VBRTN
	BSR 	SOUND
REGINT:	BSR	SWDB
	BSR	COINS
	INC	E,SPINR			;'SPINNER'
	RTI
	.SBTTL DEBOUNCE SWITCHES
;MUST RETURN WITH X=0 FOR COINS
SWDB:	LDAB	E,VBLANK		;HIGH SWITCH WORD
	ANDB	I,3F			;VBLANK & SPARE NOT USED
	LDX	I,8			;# OF SWITCHES
	LDAA	E,INPUT			;GET SECOND WORD
	ASLA				;SHIFT OFF SPARES
	ASLA				;SHIFT OFF SPARES, FALL THROUGH
	ANDA	I,0C0			;THIS WORD HAS SWITCHES IN TOP
	ABA				;MERGE WORDS
	EORA	I,0CA			;NORMALLY OPEN EXCEPT COINS & RELEASE
1$:	ASLA				;SWITCH INTO CARRY
	LDAB	X,SWSTAT-1		;STATUS FOR THIS SWITCH
	ROLB				;ROLL IN NEW STATUS
	BCS	3$			;IF SWITCH WAS ON CHECK FOR OFF
	CMPB	I,0FF			;ELSE CHECK ON 8 SAMPLES
	BEQ	2$			;YES, STORE IT AS ON
	ANDB	I,7F			;NO, KEEP IT OFF
2$:	STAB	X,SWSTAT-1
	DEX
	BNE	1$
	RTS
3$:	BEQ	2$			;IF 8 SAMPLES OFF, CALL SWITCH OFF
	ORAB	I,80			;ELSE KEEP IT ON
	BRA	2$
	.SBTTL COINS & CREDITS
COINS:	BSR	CONTST		;TEST FIRST MECH. (SWDB LEAVES X=0)
	INX
	BSR	CONTST		;THEN SECOND
	LDAB	E,OPTSEL		;GET OPTION SWITCHES
	ANDB	I,3			;COIN MODE IS BOTTOM 2 BITS
	LSRB
	ADCB	I,0			;FORM PRICE IN B, EACH SWT ADDS 1
	BNE	3$			;IT COSTS SOMETHING TO PLAY
	STAB	D,COINCT		;FREE PLAY, CLEAR COINS & CREDIT
1$:	STAB	D,CREDIT
2$:	RTS
3$:	LDAA	D,COINCT		;LOOK AT HIS MONEY
	SBA				;HAS HE MET THE PRICE
	BMI	2$			;IF NOT, RETURN
	STAA	D,COINCT		;IF SO, CHARGE HIM
	LDAA	E,OPTSEL
	BITA	I,2			;HIGH ORDER OPTION SWITCH
	BNE	4$			;IF ON, ONE CREDIT FOR THIS PRICE
	INC	X,CREDIT-1		;ELSE TWO CREDITS
4$:	INC	X,CREDIT-1		;X IS ONE, FROM CONTST
	LDAB	I,15.
	CMPB	D,CREDIT
	BMI	1$			;CREDIT TOO HIGH, SET TO LIM.
	RTS
CONTST:	LDAB	X,CNSTAT		;GET COIN STATUS
	LDAA	D,SLSTAT		;CHECK SALM SWITCH
	LSRA				;WAS LAST SAMPLE ON
	BCS	1$			;NO, PROCEED
	CLRB				;ELSE CLEAR STATUS
	BRA	4$			;AND RETURN
1$:	EORB	I,0F			;COMPLEMENT 4 LSB
	BITB	I,0F			;TO CHECK IF ALL ON
	BEQ	3$			;YES, SET ON FLAG
	EORB	I,8F			;RESTORE 4 LSB, FLIP FLAG
	BNE	2$			;ON, THEN OFF FOR 7 SAMPLES?
	INC	E,COINCT		;BUMP COIN COUNT
2$:	RTS
3$:	ORAB	I,8F			;RESTORE STATUS WITH ON FLAG SET
4$:	STAB	X,CNSTAT
	RTS

SOUND:	LDAA	D,DDVEL
	LSRA			;SHIFT HIGH BIT INTO SPEED CTL
	COMA
	ANDA	I,4
	LDAB	D,TIME			;GET FLASHER
	ANDB	I,10			;FOR WAVE-MOD
	ABA				;OR IT IN
	LDAB	D,PLAY
	BMI	1$		;IF IN GAME
	INCA			;ELSE SET ATTRACT
1$:	STAA	D,ROBYT
	LDX	I,3		;POINT TO 'BANG' VARIABLES
2$:	BSR	SNDSUB		;PROCESS, RETURNING 0 OR 1
	PSHA			;SAVE IT
	DEX
	BNE	2$		;REPEAT FOR BOOM & PING
	LSR	X,PSSST		;X=0 HERE
	ROLB
	LDX	I,OUTBIT	;SET POINTER TO SOUND LATCHES
	STAB	X,LAUNCH-OUTBIT	
	PULA			;GET BACK PING CONTROL
	STAA	X,SONAR-OUTBIT	;SET RAMP
	STAA	X,SONGAT-OUTBIT	;SET FILTER
	PULA			;GET BOOM CONTROL
	STAA	X,LOEXP-OUTBIT	;SET FILTER
	PULB			;GET BANG CONTROL
	STAB	X,HIEXP-OUTBIT	;SET FILTER
	ABA			;"OR" BOOM & BANG
	STAA	X,EXPLO-OUTBIT	;SET RAMP FOR EITHER
	RTS
SNDSUB:	CLRA
	LDAB	X,BANG-3	;GET TIMER/FLAG
	BEQ	4$		;ZERO, LEAVE ALONE
	CMPB	X,OBANG-3	;SEE IF NEW SOUND
	BLS	1$		;NO, JUST TIME
	INC	E,KICKER	;LEAVE NOTE TO PULSE KICKER
	DECA			;CANCEL EFFECT OF FOLLOWING INCA
1$:	INCA
	DECB
	BNE	2$
	CLRA
	BRA	3$
2$:	CLR	X,BOOM-3	;EACH SOUND HAS PRECEDENCE OVER
	CLR	X,PING-3	;FOLLOWING SOUNDS
3$:	STAB	X,BANG-3
4$:	STAB	X,OBANG-3
	RTS
VBRTN:	LDX	D,IRXR
	LDX	X,MINHP
	STX	E,HLOAD
	LDX	D,IRXR
	LDX	X,MINPCT
	STX	E,PICTO
	LDX	I,22.			;11 OBJECTS,2 BYTES EACH
	STS	D,SPT			;SAVE SP
	LDS	I,MAJOBJ+29.		
1$:	LDAA	X,MAJATR-1		;YOU'RE ALWAYS ONE OFF IN THIS BUSINESS
	PSHA
	DEX
	BNE	1$
	STS	D,CLXR			;SET UP FOR ROTATING CLEAR
	LDS	D,SPT			;GET SP BACK
GENT:	LDAB	D,TIME
	ANDB	I,7
	STAB	D,CLXR+1
	LDX	D,CLXR
	CLR	X,0			;ROTATING CLEAR OF UPPER MAJOR OBJ
	LDAB	I,SCREEN/100		;PLAY IT SAFE
	STAB	D,DSTPTR
	LDAB	D,TYPCNT		;GET TEXT BYTE COUNT
	BMI	CLRSCN			;MINUS COUNT IS CLEAR
	BEQ	NXTMSG			;0,GET NEXT MESSAGE
	LDX	D,SRCPTR
	LDAA	X,0			;ELSE OUTPUT ONE BYTE
	INX
	STX	D,SRCPTR
	LDX	D,DSTPTR
	STAA	X,0
	BMI 	NXTMSG			;MINUS FLAGS END
	DEX
	STX	D,DSTPTR
	RTS
NXTMSG:	LDAB	D,BCNT			;SEE IF ANYTHING IN BUFFER
	BEQ	10$			;NO, CLEAR CODE AND RETURN
	LDAA	D,OUTPTR		;GET BUFFER OUT POINTR
	STAA	D,IRXR+1
	LDX	D,IRXR			;POINT TO BUFFER ELEMENT
	LDAB	X,MSGBUF+1		;COPY SCREEN POSN
	STAB	D,DSTPTR+1		;TO DEST. PTR.
	LDAB	X,MSGBUF		;GET COUNT (OR CODE)
	STAB	D,TYPCNT		;STORE IT
	BMI	2$			;NEG CNT IS CLR, NO SRC
	LDAB	D,BCNT			;ELSE MAKE SURE THERE'S
	DECB				;MORE IN BUFFER
	BNE	1$			;YES,CONTINUE
10$:	STAB	D,TYPCNT		;ELSE CLEAR TYPE/COUNT
	RTS
1$:	STAB	D,BCNT			;STORE DECREMENTED COUNT
	BSR	INCPTR			;ELSE POINT TO SOURCE ADDR
	STAA	D,IRXR+1		;INCPTR RETURNS ADL IN ACCA
	LDX	D,IRXR			;POINTER INTO BUFFER
	LDX	X,MSGBUF		;DP LOAD FROM BUFFER
	STX	D,SRCPTR		;DP STORE
	LDAB	D,TYPCNT		;CHECK CNT.
	BNE	2$
	PSHA				;SAVE Q PTR.
	BSR	BCDASC			;0 MEANS BCD LIT.
	ORAA	I,80!'0			;FLAG END
	STAA	X,NUMBUF-1
	LSRA				;MAKE A POSITIVE NON-ZERO
	STAA	D,TYPCNT		;FOR WRITE (VS CLEAR) FLAG
	PULA				;GET BACK Q PTR
	LDX	I,NUMBUF
	STX	D,SRCPTR		;POINT TO # BUFFER
2$:	BSR	INCPTR			;MOVE POINTER PAST WORD
	DEC	E,BCNT			;SAY SO
	STAA	D,OUTPTR		;SAVE IT
	RTS
CLRSCN:	LDAB	I,4
	LDX	D,DSTPTR
1$:	CLR	X,0
	INX
	STX	D,DSTPTR
	INC	E,TYPCNT
	BEQ	NXTMSG
	DECB
	BPL	1$
VBRET:	RTS
INCPTR:	ADDA	I,2
	CMPA	I,<BUFLEN*2>-2		;CHECK FOR WRAP
	BCS	1$			;NO WRAP, CONTINUE
	LDAA	I,0			;ELSE RESET TO BEGINNING
1$:	RTS

BCDASC: CLRB			;USE CHAR 0 FOR SPACE
	LDX	I,0
	LDAA	D,SRCPTR
	LSRA
	LSRA
	LSRA
	LSRA
	BSR	STRZP
	LDAA	D,SRCPTR
	BSR 	STRZP
	LDAA	D,SRCPTR+1
	LSRA
	LSRA
	LSRA
	LSRA
	BSR	STRZP
	LDAA	D,SRCPTR+1
STRZP:	ANDA	I,0F
	BEQ	1$			;IF ZERO STORE ACCA
	LDAB	I,'0			;IF NON-ZERO, SET FLAG AND USE FOR BASE
1$:	ABA
	STAA	X,NUMBUF
	INX
	RTS
	.SBTTL NON-MASK. INT.
NMINT:	LDAA 	D,ROBYT
	ORAA	I,2		;KEEP KICKER OFF
	STAA	E,OUTBYT
1$:	LDAB	E,VSYNC
	STAA	NMFLAG		;LEAVE A NOTE FOR V-BLANK
2$:	TBA			;COPY VALUE
	SUBA	D,POTVAL	;CHECK VS OLD VALUE
	BCC	3$
	NEGA			;TAKE ABS. VALUE
3$:	LSRA			;IF !DIFFERENCE! <2
	BEQ 	4$		;DON'T UPDATE
	STAB	D,POTVAL	;ELSE STORE NEW VALUE
4$:	RTI
SETDPT:	LDAA	D,PLAY
	BEQ	3$		;DISABLE DEPTH CONTROL IN ATTRACT
	LDAA	D,POTVAL
2$:	CMPA	I,8F
	BLS	3$
	LDAA	I,8F
3$:	CMPA	I,17
	BHI	4$
	LDAA	I,17
4$:	STAA	D,EXPLVL
5$:	RTS
	.SBTTL UPDATE POSITIONS
UPDPSN: LDX	I,4			;4 DEPTH CHARGES
	STX	D,ACTIVE
1$:	LDAB	X,MINPCT-1		;WHAT PICTURE
	BEQ	9$			;IF 0, BLANK IT
	BITB	I,8			;SCORE MARKER?
	BNE	2$			;YES, TIME IT
	BITB	I,4			;TUMBLE?
	BNE	4$			;YES, LET IT FALL
	JSR	EXPCHK			;ELSE MUST BE EXPLODING, CHECK HITS
	LDAA	X,MINPCT-1		;GET PICT.
	SUBA	I,20			;DEC. FROM MIDDLE
	SBCA	I,0			;WITH END-AROUND BORROW
	BITA	I,0F			;CHECK RESULTING PICT.CODE
	BNE	10$			;STILL EXPLODING, STORE PICT
	LDAA	X,DCSCR-1		;ELSE CHECK SCORE FLAG
	BEQ	9$			;NO SCORE, RESET CHARGE
	LDAA	X,DCSHP-1		;ELSE GET POSN. OF TARGET
	STAA	X,MINHP-1		;SET HORIZ.
	LDAA	X,DCSVP-1
	STAA	X,MINVP-1		;SET VERT
	LDAA	X,DCSCR-1		;GET BACK SCORE
3$:	ANDA	I,7			;ISOLATE POINT VALUE
	ORAA	I,8			;MAKE IT A SCORE MARKER
	BRA	10$			;STORE PICT.
2$:	LDAB	D,VBOSC
	BPL	11$
	LDAA	X,DCSCR-1		;GET SCORE FLAG
	SUBA	I,8			;DEC TIMER
	STAA	X,DCSCR-1
	BITA	I,0F8			;TIME UP?
	BNE	3$			;NO, SET PICT (INSURANCE)
	CLR	X,DCSCR-1		;ELSE CLEAR SCORE FLAG
	BRA	9$			;AND RESET CHARGE
25$:	BRA	1$			;WAY-STATION FOR LONG BRANCH
4$:	LDAB	X,MINVP-1
	LDAA	X,DCVSPD-1		;GET SPEED
	BMI	5$			;IF DOWNWARD, PROCEED
	CMPB	I,0A0			;ELSE CHECK V.POSN AGAINST WATERLINE
	BLS	5$			;BELOW WATERLINE, PROCEED
	DECA
	STAA	X,DCVSPD-1		;ELSE INCREASE DOWNWARD VEL.
5$:	ABA				;ADD SPEED TO VERT POSN
	STAA	X,MINVP-1
	CMPA	X,DCEXPD-1		;CHECK FOR EXPLOSION DEPTH
	BHI	7$			;IF NOT,TUMBLE
6$:	LDAB	I,40			;ELSE INIT EXPLOSION
	STAB	D,BOOM			;SET TIME FOR BOOM
	LDAA	I,EXP1+0F0		;START EXPLOSION SEQ.
	CLR	X,DCVSPD-1		;STOP FALLING
	BRA	10$
7$:	LSRA	  			;SHIFT VERT POSN DOWN
	LSRA
	BITA	I,2			;CONVERT 2 BIT BINARY
	BEQ	8$
	EORA	I,1			;TO GRAY CODE
8$:	ANDA	I,3			;ISOLATE ROTATION
	ORAA	I,4			;MAKE IT A TUMBLE PICT
	BRA	10$
9$:	DEC	E,ACTIVE+1
	LDAA	D,CNSTAT+1
	ORAA	D,PFLAG
	ANDA	D,RELSE
	ANDA	I,80
	STAA	D,PFLAG
	ORAA	I,10
	STAA	X,MINHP-1
	STAA	X,MINVP-1
	CLRA
10$:	STAA	X,MINPCT-1
11$:	DEX
	BNE	25$
	RTS
UPDTRG: LDX	I,NTARGS+1		;N TARGETS + 1 DD
UPDTLP:	LDAB	X,TARGVL-1		;TARGET SPEED
	ANDB	I,7F			;KEEP IT CLEAN
	STAB	X,TARGVL-1
	LDAA	X,TARGAT-1		;TARGET ATTRIB
	ANDA	I,8			;CHECK DIRECTION
	BEQ	5$			;FORWARD,LEAVE ALONE
	CLRA
	NEGB				;ELSE REVERSE
	BEQ	5$			;ZERO IS ITS OWN NEGATIVE
	COMA				;SIGN EXTEND B INTO A
5$:	ASLB
	ROLA
	ASLB
	ROLA
	ASLB
	ROLA				;SCALE SPEED
	ADDB	X,TARGHL-1		;DP ADD VEL TO POSN
	ADCA	X,TARGHP-1
	STAB	X,TARGHL-1
	STAA	X,TARGHP-1
	DEX
	BNE	UPDTLP
;	NOW PUT EVERYTHING IN ITS PLACE
	STX	D,MLXR			;CLEAR MLXR
	LDX	I,NTARGS+1		;POINT TO DD (AFTER TARGETS)
	STX	D,SBXR			;BOTH WAYS
	CLRA
	BRA	65$			;ENTER LOOP PAST DEPTH DETERMINATION
6$:	STX	D,SBXR			;TARGET # +1
	LDAA	X,TARGD-1			;GET TARGET DEPTH
	BEQ	11$			;IGNORE 0'S
	CMPA	I,10.
	BHI	11$			;TOO DEEP
	ASLA				;2 BYTES PER OBJECT
	STAA	D,MLXR+1		;SET UP POINTER TO ZONE
7$:	LDAA	X,TARGEX-1		;IS TARGET EXPLODING?
	BEQ	65$			;NO PROCEED
	COMA				;WE WANT TO END ON CLOUD
	ANDA	I,2			;USE EXP. TIMER TO "TWINKLE"
	BEQ	65$			;IF 2-BIT CLEAR, SHOW TARGET
	INCA				;ELSE MAKE A 3 (WILL BE 0)
65$:	COMA				;MAKE MASK FOR ATTRIB BYTE
	ANDA	X,TARGAT-1
	ORAA	I,4			;PRESET WINDOW
	LDAB	X,TARGHL-1
	ASLB				;HIGH BIT OF LOW BYTE INTO CARRY
	LDAB	X,TARGHP-1		;GET HORIZ. POSN (0-A0)
	ROLB
	BCC	9$			;<256, PROCEED
	CMPB	I,40			;'OFF SCREEN'?
	BCS	8$			;NO, PROCEED
	CLR	X,TARGVL-1		;ELSE STOP
8$:	SEC				;RECONSTITUTE MSB OF HPOSN
9$:	LDX	D,MLXR			;POINT TO ZONE
	BCC	10$			;HPOSN MSB CLEAR, LEAVE WINDOW SET
	ANDA	I,0B			;ELSE CLEAR WINDOW
10$:	STAA	X,MAJATR		;STASH ATTRIB
	SUBB	I,40			;WINDOW OFFSET
	STAB	X,MAJHP
11$:	LDX	D,SBXR
	DEX				;NEXT TARGET
	BNE	6$			;IF THERE IS ONE
;	NOW MAKE SURE NO TRASH ON SCREEN
HSCLN:  LDAA	D,TIME			;SLOW SCAN THROUGH SLOTS
	ANDA	I,0F
	SUBA	I,5
	BLE	2$			;SLOTS 1-10 DON'T EXIST
	LDX	I,NTARGS		;SCAN TARGETS
1$:	CMPA	X,TARGD-1		;YAOOITB (MORRIS)
	BEQ	2$			;SLOT USED FOR THIS TARGET
	DEX
	BNE	1$
	ASLA				;2 BYTES PER OBJECT
	STAA	D,MLXR+1		;SET UP SLOT POINTER
	LDX	D,MLXR			;POINT TO SLOT
	CLR	X,MAJATR
	CLR	X,MAJHP
2$:	RTS

	.PAGE
	.SBTTL I/O ROUTINES

WRITEX:	STX	D,MLSRC			;STORE WORD TO BE WRITTEN
	BRA	WXENT			;SHARE MEAGER CODE BYTES
WRITEB:	STAA	D,MLSRC+1		;SAVE DIGIT TO BE WRITEN
	CLRA
WRITEW:	STAA	D,MLSRC			;STORE WORD IN
WXENT:	CLRA				;'COUNT' IS 0
	BRA	WCOM		;ENTER WRITE COOMON CODE
WRITEM:	LDX	E,7000		;CHECK BOTTOM ROM SPACE
	CPX	I,0		;***DUMMY
	.=	.-2		;BACKSPACE FOR REAL IMMEDIATE
	.RAD50	/FLR/		;FOREIGN LANG. ROM
	BNE	1$
	JSR	7002		;LET OTHER ROM RETURN PTR AND DEST.
	BRA	2$
1$:	TAB
	ASLA
	ABA			;MESSAGE # *3
	STAA	D,SBXR+1
	LDAA	I,MTBL/100
	STAA	D,SBXR
	LDX	D,SBXR		;GET PTR TO MSG TABLE
	LDAB	X,MTBL&0FF	;GET DEST.
	LDX	X,MTBL+1&0FF	;AND PTR TO STRING
2$:	STX	D,MLSRC
	LDAA	I,4
WCOM:	STAA	D,MLCNT			;SAVE COUNT/CODE
	STAB	D,MLDST			;STORE DEST. PTR.
	LDAB	I,-1			;EVERYBODY USES AT LEAST ONE CELL
	TSTA
	BMI	3$			;THAT'S ALL CLR NEEDS
	DECB				;WRITES TAKE 2
3$:	ADDB	I,BUFLEN		;HOW CLOSE TO END OF BUFFER
4$:	CMPB	D,BCNT			;IS THERE ROOM
	BLE	4$			;NOT YET, WAIT
	LDAA	D,INPTR			;INPUT PTR. FOR CIRC. BUFF.
	STAA	D,MLXR+1
	CLR	E,MLXR
	LDX	D,MLXR			;POINT TO BUFFER
	LDAA	D,MLCNT
	STAA	X,MSGBUF		;CNT TO BUFFER
	LDAA	D,MLDST
	STAA	X,MSGBUF+1		;DST TO BUFFER
	CMPB	I,BUFLEN-1		;ONE OR TWO WORDS
	BCC	5$			;ONE WORD, SKIP
	LDAA	D,MLXR+1		;ELSE GET BACK BUFF PTR
	JSR	INCPTR			;BUMP IT
	INC	E,BCNT			;BUMP COUNT
	STAA	D,MLXR+1
	LDX	D,MLXR			;GET IT INTO X
	LDAA	D,MLSRC
	STAA	X,MSGBUF		;MOVE SOURCE TO BUFFER
	LDAA	D,MLSRC+1
	STAA	X,MSGBUF+1
5$:	LDAA	D,MLXR+1		;GET PTR
	JSR	INCPTR			;BUMP IT
	STAA	D,INPTR			;SAVE FOR NEXT TIME
	INC	E,BCNT			;BUMP COUNT
	RTS
	
	.SBTTL MISC. SUBRTNS
GNTARG: STX	D,SBXR			;SAVE X (POINTS TO TARGET
	INC	E,SPINR			;PREVENT PHASE-LOCK
	LDAA	D,SPINR			;GET SPINNER
	CLC
	BITA	I,8
	BNE	1$
	SEC
1$:	ANDA	I,7
	ORAA	I,8
	BCS	2$
	TAB
	LSRB
	ABA				;CARRY STAYS CLEAR
2$:	STAA	X,TARGVL-1
	LDAA	I,1			;LOAD SUB #
	ADCA	I,0			;CARRY SET WILL MAKE A2
	LDAB	D,SPINR			;SPINNER MAY OR MAY NOT BE SAME
	LSRB				;USE ANOTHER BIT ANYWAY
	ANDB	I,8			;MASK FOR DIRECTION BIT
	STAB	D,LTD			;LAST TARGET DIRECTION
	ABA				;ADD IT TO SUB-TYPE
	STAA	X,TARGAT-1		;STORE ATTRIBUTES
	LDAB	D,TIME
3$:	ANDB	I,7			;8 VALID DEPTHS FOR SUBS
	ADDB	I,3			;DEPTHS 3-10
	LDX	I,NTARGS
4$:	CMPB	X,TARGD-1		;CHECK FOR SAME DEPTH AS BEFORE OR OTHER
	BEQ	3$			;YES, TRY AGAIN
	DEX				;NEXT TARGET
	BNE	4$
	LDX	D,SBXR
	STAB	X,TARGD-1		;SET DEPTH
	LDAB	I,9F
	BITA	I,8
	BNE	5$
	CLRB
5$:	STAB	X,TARGHP-1
	CLR	X,TARGEX-1
	RTS
ASDIC:  ANDA	I,7F
	BEQ	1$
	LDAB	D,DDHP
	LSRB
	LSRB
	CBA
	BNE	2$
1$:	LDAA	I,0FF			;PING IS LOWEST PRIORITY, CAN RUN LONGER
	STAA	D,PING
2$:	RTS
	.PAGE
	.SBTTL POWER-ON-RESET
RESET:	LDS	I,STACK			;SET SP
	LDX	I,256.
1$:	CLR	X,255.			;CLEAR RAM AT DOUBLE-MAP ADDR.
	DEX
	BNE	1$
	LDAA	E,INPUT
	LSRA
	BCS	2$
	JMP	GAME2
2$:	LDAA	E,INPUT+1
	BITA	I,8			;TEST SW
	BNE	3$			;ONE IS OFF, DO GAME
	JMP	TEST			;ELSE DO TEST RTN.
3$:	CLI
	.SBTTL MAIN LOOP
RSTENT:	LDAA	I,80			;COUNT OF -128
	TAB				;DEST OF 128
	JSR	WCOM			;CLEAR SCREEN
	CLRA
	STAA	D,PLAY			;TIME OUT, SET ATTRACT
	COMA				;MAKE A 255.
	STAA	D,GOTM			;TIMER FOR 'GAME OVER'
	STAA	E,CRDLMP
	LDX	D,SCORE
	LDAB	I,0DE			;POSN. FOR SCORE
	JSR	WRITEX			;WRITE SCORE
	LDAA	I,.SCR1			;SCORE
	JSR	WRITEM
	LDX	D,HISCR
	BEQ	1$			;SKIP IT IF ZERO
	LDAB	I,0C4			;POSN. FOR HIGH SCORE
	JSR	WRITEX
	LDAA	I,.SCR2
	JSR	WRITEM
	LDAA	I,.HI
	JSR	WRITEM
1$:	BSR	EPCAL			;GET EXTENDED PLAY OPTION
	BEQ	WAIT			;0 MEANS NO EXTENDED PLAY
	PSHA				;SAVE LEVEL
	LDAA	I,.EP
	JSR	WRITEM
	LDAA	I,.FOR
	JSR	WRITEM
	PULA
	CLR	E,MLSRC+1		;2 DUMMY ZEROES
	LDAB	I,0EE
	JSR	WRITEW
WAIT:	LDAA	D,TIME
	CMPA	D,OTIME
	BEQ	WAIT			;WAIT FOR FRAME TO CHANGE
	STAA	D,OTIME
	JSR 	ASDIC
	JSR	UPDPSN			;UPDATE DEPTH CHARGES
	LDAA	D,PLAY
	BGT	21$			;FREEZE MOTION IN CREDIT-WAIT
	JSR	UPDTRG			;UPDATE TARGETS
21$:	JSR	SETDPT
	BSR	GAMTIM
	BVS	RSTENT			;V BIT IS END OF GAME
5$:	LDAA 	D,PLAY
	BMI	8$
	LDAA	D,TIME
	BNE	7$
	DEC	RFTIM			;COUNT WRAPS
	BEQ	RSTENT			;DISPLAY REFRESH
7$:	BSR 	ATTRTN
8$:	JSR 	MNTARG
	JSR	MNDD
	LDAA	D,DTIME	
	BEQ	WAIT    		;TIME=0, DON'T DROP CHARGES
	JSR	DCDROP
	BRA	WAIT

EPCAL:	LDAA	E,INPUT			;GET OPTION SW.
	LSRA
	LSRA				;SHIFT INTO THOUSANDS DIGIT
	ANDA	I,30			;MASK
	BEQ	1$			;0 STAYS 0
	ORAA	I,5			;ELSE ADD "500"
1$:	RTS
GAMTIM:	LDAB	D,PLAY			;CHECK MODE
	BPL	5$			;BRANCH ON ATTRACT OR CREDIT WAIT
	LDAA	D,DTIME
	BEQ	2$			;IF TIME=0, CHECK CHARGES
1$:	DEC 	E,FRDIV			;ELSE COUNT FRAMES
	BPL	5$
	ADDA	I,99			;DECA, IN DECIMAL
	DAA
15$:	STAA	D,DTIME
	BRA	4$
2$:	BSR	EPCAL			;GET EXTENDED PLAY LEVEL
	BEQ	34$			;NO E.P.
	LDAB	D,EPFLAG		;ALREADY IN E.P.?
	BNE 	34$			;YES
	CMPA	D,SCORE			;DID PLAYER MAKE IT?
	BHI	34$			;NO
	LDAA	I,.EP			;ELSE WRITE IT
	JSR	WRITEM
	LDAA	I,33			;GIVE 33% MORE TIME
	STAA	D,EPFLAG
	BRA	15$			;AND CONTINUE
34$:	LDAB	D,ACTIVE+1		;GET #OF ACTIVE CHARGES
	BNE	5$			;CHARGE IN USE, RETURN
35$:	SEV				;FLAG GAME OVER
	RTS
4$:	LDAB	I,0C5			;PLACE FOR TIMER
	JSR	WRITEB			;WRITE IT OUT
	LDAA	E,OPTSEL
	ANDA	I,0C			;TIME OPTION IS D3,D2
	TAB
	LSRB
	LSRB				;B=16X OPT
	ASLA
	ASLA				;A=OPT
	SBA				;OPT#*15
	ADDA	I,29.			;DIVIDE BY 30,45,60,75
	STAA 	D,FRDIV			;FOR 50,75,100,125 SEC.
5$:	CLV				;CLEAR TIME-OUT FLAG
	RTS
ATTRTN: LDAA	D,TSTSW
	BPL	1$
	SEI				;MASK IRQ
	CLR	E,OUTBYT		;AND NMI
	SWI				;CHECK RAM AND GO TO TEST
1$:	LDAA	D,GOTM			;CHECK 'GAME OVER' TIMER
	BEQ	61$			;TIMED OUT, PUT UP COIN MESSAGE
	DECA
	STAA	D,GOTM			;ELSE RUN TIMER
	LDAA	I,.GO			;POINT TO MESSAGE
	LDAB	E,OPTSEL		;GET COIN MODE
	ANDB	I,3			;FREE PLAY?
	BNE 	62$			;NO, CHECK CREDIT
	BRA	64$			;ENTER COMMON CODE
61$:	LDAA	E,OPTSEL		;GET OPTION SWITCHES
	ANDA	I,3			;MASK FOR COIN OPTION
	BEQ	64$			;IF FREE PLAY, SKIP CREDIT CHECK
62$:	LDAB	D,CREDIT
	BEQ	7$
	STAB	D,PLAY			;FORCE CREDIT-WAIT
	CLRA
63$:	LDX	I,M.PS			;POINT TO 'PRESS START'
64$:	LDAB	D,TIME
	LSRB
	LSRB
	LSRB
	STAB	E,CRDLMP		;FLASH START LAMP
	LDAB	D,STRTSW
	BPL	7$
	DEC	E,CREDIT
	LDAA	I,0A0
	STAA	D,DTIME
	CLRA
	LDX	I,0
	STX	D,GOTM			;KILL TIMER AND EPFLAG
	STX	D,SCORE
	STX	D,TARGVL		;RESET TARGETS
	STAA	E,CRDLMP
	LDAA	I,80
	STAA	D,PLAY			;SET MODE TO PLAY
	TAB				;SET UP DEST
	JSR	WCOM			;CLEAR SCREEN
	LDAA	I,.SCR1
	JSR	WRITEM
	LDAA	I,.TIM
	JSR	WRITEM
	CLRA
	CLRB
	JMP	WSCORE
7$:	LDAB	D,BCNT			;CHECK IF BUFFER BUSY
	BNE	8$			;YES, DON'T BOTHER
	JSR	WRITEM			;ELSE WRITE ATTRACT MESSAGE
8$:	RTS
MNTARG:	LDX	I,NTARGS		;# OF TARGETS
1$:	LDAA	X,TARGVL-1		;STOPPED?
	BNE	3$			;NO, SKIP IT
	LDAA	X,TARGEX-1		;EXPLODING?
	LSRA				;1 COUNTS AS 0
	BEQ	2$			;NO, MAKE NEW ONE
	DEC	X,TARGEX-1		;ELSE RUN TIMER
	BRA	3$
2$:	JSR	GNTARG			;GENERATE TARGET
3$:	DEX
	BNE	1$
	RTS
MNDD:	LDAA	D,DDENG		;GET ENG SPEED
	LDAB	D,PLAY
	BPL	1$
	LDAA	D,DDSPD		;AND SPEED SWITCH
	ANDA	I,80
	BEQ	1$		;LEAVE 0 
	EORA	I,8F		;CHANGE 80 INTO 0F
1$:	LDAB	D,DDVEL		;SAVE OLD VEL
	STAA	D,DDENG		;STORE NEW ENGINE (0-1F)
	ORAA	I,7		;0=7, F=F
	STAA	D,DDVEL		;STORE NEW SPEED
	TSTB			;CHECK OLD
	BNE	5$
	LDAA	D,LTD		;IF STOPPED CHECK LATEST TARGET
	EORA	I,8		;GO OTHER DIRECTION
	ORAA	I,3
	STAA	D,DDAT
	LDAB	I,80		;START AT LEFT EDGE
	BITA	I,8		;CHECK DIRECTION
	BNE	4$		;MOVING RIGHT?
	LDAB	I,20		;ELSE SET RIGHT EDGE
4$:	STAB	D,DDHP
5$:	RTS
DCDROP:	LDAA	D,PLAY			;IN PLAY?
	BPL	4$			;NO, IGNORE CONTROLS
	LDAA	D,RELSPC		;TIMER BETWEEN RELEASES
	LDAB	RELSE			;RELEASE BUTTON
	BMI	10$			;- IS ON, FIRE A CHARGE
	CLRA				;ELSE SET TIMER TO 0
	BRA	25$
10$:	DECA				;TIME INTERVAL BETWEEN CHARGES
	BPL	25$			;NOT UP YET
	LDX	I,4
1$:	LDAB	X,MINPCT-1
	BNE	3$
	LDAB	D,DDHP		;GET DD POSN
	LDAA	D,DDAT		;GET DD ATTRIB.
	BITA	I,8		;CHECK DIRECTION
	BNE	2$		;FORWARD, LEAVE ALONE
	SUBB	I,20		;ELSE SHIFT 32 PLACES (MOVE STERN)
2$:	ASLB			;DC HALF THE RANGE
	BCS	4$		;OFF SCREEN, GIVE UP
	COMB			;DC REFLECTED FROM DD
	ADDB	I,8		;OFFSET IN DC WINDOW
	CMPB	I,0F
	BLS	4$
	STAB	X,MINHP-1
	LDAA	D,EXPLVL
	ADDA	I,9
	STAA	X,DCEXPD-1
	LDAA	I,4
	STAA	X,DCVSPD-1
	LDAA	I,0C0
	STAA	X,MINVP-1
	LDAA	I,TUMBLE
	STAA	X,MINPCT-1
	LDAA	I,3F
	STAA	D,PSSST
	LDAA	I,30.
25$:	STAA	D,RELSPC
	RTS
3$:	DEX
	BNE	1$
4$:	RTS
EXPCHK:	LDAA	X,MINHP-1		;GET CHARGE HORIZ.POSN.
	COMA
	ADDA	I,8			;OFFSET TO CENTER OF CHARGE
	LSRA
	LSRA				;SCALE TO 0-3F
	ADDA	I,8			;OFFSET TO CENTER OF SUB (RANGE 8-47)
	STAA	D,CHGHP
	LDAB	X,MINVP-1
	ADDB	I,2
	STAB	D,CHGVP
	STX	D,SBXR2
	LDX	I,NTARGS
EXCLOP: CLRB
	LDAA	I,16.		;SPEED BREAK
	CMPA	X,TARGVL-1
	ROLB
	STAB	D,POINTS	;BONUS FOR FAST
	LDAA	I,0C
	SUBA	X,TARGD-1
	ASLA
	ASLA
	ASLA
	ASLA
	STAA	D,TARGVT	;SAVE TARGET VERT.
	SUBA	D,CHGVP
	BHI	2$
	NEGA
2$:	LDAB	X,TARGEX-1	;ALREADY EXPLODING?
	BNE	EXPEND		;YES, SKIP IT
	LDAB	X,TARGHP-1		;RANGE 0-A0
	LSRB				;SCALE TO 0-50
	STAB	D,TARGHT	;SAVE TARGET HORIZ.
	SUBB	D,CHGHP
	BHI	3$
	NEGB				;IF BORROW TAKE ABS. VAL
3$:	ASLB			;RE-EXPAND RANGE
	ABA				;ADD 1/2 HORIZ DIST TO VERT DIST
	BCS	EXPEND			;CARRY IS IMMEDIATLY OUT
	LDAB	X,TARGAT-1		;CHECK TYPE OF SUB
	LSRB
	LDAB	I,18			;ASSUME LARGE
	BCC 	34$			;CHECK
	LDAB	I,14			;SMALL IS SMALLER
34$:	CBA
	BLS	HIT			;PROCESS HIT
EXPEND:	DEX
	BNE	EXCLOP
	LDX	D,SBXR2
	RTS
HIT:	CLR	X,TARGVL-1
	LDAA	I,1F
	STAA	X,TARGEX-1
	LDAA	I,40
	STAA	D,BANG
	LDAA	X,TARGD-1	;GET DEPTH
	SUBA	I,3		;MAKE RANGE 0-7
	ANDA	I,6		;3 DEPTH SCORE ZONES
	ORAA	D,POINTS	;+1 FOR FAST SUB
	STAA	D,SBXR4+1	;SAVE POINT VALUE
	ORAA	I,0F8		;STUFF TIMER IN TOP 5 BITS
	STX	D,SBXR3		;SAVE PTR TO SUB
	LDX	D,SBXR2		;GET PTR TO CHARGE
	STAA	X,DCSCR-1	;SET SCORE PICTURE
	LDAA	D,TARGVT	;GET VERT POSN OF TARGET HIT
	STAA	X,DCSVP-1	;SAVE FOR SCORE TAG
	LDAA	D,TARGHT	;HORIZ. POSN. OF TARGET (0-50)
	SUBA	I,8
	BCS	10$
	CMPA 	I,8
	BHI	1$
10$:	LDAA	I,8
1$:	CMPA	I,3F
	BLS	2$
	LDAA	I,3F
2$:	ASLA
	ASLA			;WAS COMPRESSED
	COMA			;CONVERT TO CHARGE
	ADDA 	I,8		;CO-ORDS
	STAA	X,DCSHP-1
	LDX	D,SBXR4		;SCORE VALUE
	INX
	CLRA
	CLRB
21$:	ADDA	I,25
	DAA
	ADCB	I,0
	DEX
	BNE 	21$
	PSHB
	ADDA	D,SCORE+1
	DAA
	STAA	D,SCORE+1
	TAB
	PULA				;HIGH DIGS OF SCORE
	ADCA	D,SCORE
	DAA
	STAA	D,SCORE
	CMPA	D,HISCR			;CHECK VS PREV. HIGH
	BHI	3$			;HIGHER, UPDATE
	BCS	4$			;LOWER, SKIP IT
	CMPB	D,HISCR+1		;=, CHECK LOW BYTE
	BLS	4$			;< OR =, SKIP
3$:	STAB	D,HISCR+1
	STAA	D,HISCR
4$:	BSR	WSCORE
	LDX	D,SBXR3
	BRA	EXPEND
WSCORE:	STAB	D,MLSRC+1
	LDAB	I,0DE
	JMP	WRITEW
M.SCR:	.ASCII	/SCOR/
	.BYTE	'E!80
M.TIM:	.ASCII	/TIM/
	.BYTE	'E!80
M.HI:	.ASCII	/HIG/
	.BYTE	'H!80
M.EP:	.ASCII	/EXTENDED PLA/
	.BYTE	'Y!80
M.FOR:	.ASCII	/FO/
	.BYTE	'R!80
M.GO:	.ASCII	/   GAME OVE/
	.BYTE	'R!80
M.2GPC:	.ASCII	/2 GAMES PER COI/
	.BYTE	'N!80
M.1CPG:	.ASCII	/1 COIN PER GAME/
	.BYTE	0A0
M.2CPG:	.ASCII	/2 COINS PER GAM/
	.BYTE	'E!80
M.PS:	.ASCII	/   PRESS START  /
	.BYTE 0A0
MTBL:	.BYTE	0B7
	.WORD	M.PS
	.BYTE	0B6
	.WORD	M.2GPC
	.BYTE	0B6
	.WORD	M.1CPG
	.BYTE	0B6
	.WORD	M.2CPG
	.BYTE	0BE
	.WORD	M.SCR
	.BYTE	0A4
	.WORD	M.SCR
	.BYTE	0A4
	.WORD	M.TIM
	.BYTE	84
	.WORD	M.HI
	.BYTE	0D5
	.WORD	M.EP
	.BYTE	0F2
	.WORD	M.FOR
	.BYTE	0B6
	.WORD	M.GO
TEST:	LDX	I,MAJOBJ		;POINT TO MAJOBJ RAM
	CLRA				;POSN 0 WINDOW 0 =BLANK
1$:	LDAB	E,VSYNC			;WAIT FOR ACTIVE SCAN
	CMPB	I,240.			;CATCH LEADING EDGE OF V-BLANK
	BNE	1$
	LDAB	I,31.			;SAFE #OF WRITES-1
3$:	STAA 	X,0			;CLEAR A BYTE
	INX				;BUMP PTR
	DECB				;AND CTR
	BPL 	3$			;BACK FOR MORE

WSCRN:  LDX	I,SCREEN+80
	LDAA	I,1F
1$:	LDAB	I,248.
	STAB	E,WTCHDG		;MUZZLE DOG
	EORB	E,VSYNC
	BNE 	1$
	STAB	X,40			;CLEAR LAST TWO LINES
	STAB	X,60
	TAB
	DECB				;SHIFT TO GET ZERO OFF THE FENCE
	ORAB	I,30			;DOUBLE-MAP FROM ALPHA TO NUMERIC
	STAB	X,0
	STAA	X,20
	INX
	DECA
	BPL 	1$

RAMTST:	LDX	I,256.
	LDAA	I,255.
2$:	LDAB	X,255.			;CHECK IF BYTE STILL 0
	BNE	3$			;IF NOT, IS ERROR
	STAA	X,255.			;ELSE SET ONES TO CHECK DISTURB
	TAB
	EORB	X,255.			;CHECK ONE-RETENTION
	BNE	3$			;NO-GOOD
	DEX				;ELSE KEEP SCANNING
	BNE	3$
3$:	LDAA	E,VSYNC
	CMPA	I,240.
	BNE	3$			;WAIT FOR LEADING EDGE
	STAB	E,WTCHDG		;CALM DOG
	LDS	I,SCREEN+0D6		;POINT TO SCREEN
	LDX	I,BRAK  		;POINT TO STRING 'BAD RAM OK'
	TSTB				;CHECK ERROR BITS
	BNE 	5$			;THERE ARE SOME, OUTPUT 'BAD RAM'
	LDX	I,BRAK+3		;ELSE POINT TO 'RAM OK'
5$:	LDAB	I,6
6$:	LDAA	X,0
	PSHA
	INX
	DECB
	BPL	6$
ROMTST: LDX	I,0F800			;START OF HIGH COPY OF PROGRAM
	LDAA	I,73			;STARTING PT FOR CHECKSUM
1$:	SUBA	X,0
	INX
	BNE 	1$
	STAA	E,WTCHDG		;CALM DOG,SNAP RESIDUE
2$:	LDAB	E,VSYNC+0D0
CHKSUM	=	.-1			;ADL IS DON'T CARE (4K DECODE)
	CMPB	I,240.
	BNE	2$			;WAIT FOR LEADING EDGE
	DES
	LDX	I,BROK+3		;PT TO STRING 'ROM OK'
	TSTA				;ERRORS?
	BEQ	4$			;NO
	LDX	I,BROK
4$:	LDAB	I,6
5$:	LDAA	X,0
	PSHA
	INX
	DECB
	BPL	5$

SWTTST:	LDX	I,INPUT+16.		;HAVE A POINTER HANDY
	LDAA	I,2
	STAA	X,OUTBYT-INPUT		;TURN OFF KICKER
	STAA	X,EXPLO-INPUT		;TURN OFF EXPLOSION RAMP
	LSRA				;MAKE A ONE
	STAA	X,SONGAT-INPUT		;TURN ON PING FILTER
1$:	LDAB	E,VSYNC
	CMPB	I,240.
	BNE	1$
	STAB	E,WTCHDG		;CALM DOG, STEADY CURSOR
	STX	E,VLOAD			;STEADY CHARGES
	LDAB	X,1			;INPUT+17. (MULTI-MAPPED)
	BITB	I,8			;CHECK TEST SWITCH
	BEQ	2$			;STILL ON, CONTINUE
	SWI				;ELSE FAKE RESET
2$:	EORB	X,0			;OTHER SWITCHES
	ASLA				;CLEAR BOTTOM OF OLD SWITCH COUNT
3$:	LSRB				;SHIFT OUT SWITCH WORD
	BEQ	4$			;LAST SWITCH (V-BLANK) IGNORED
	BCC	3$			;SWITCH OFF, LOOP
	EORA	I,1			;ELSE ACCUM. PARITY IN BOTTOM OF ACCA
	BRA	3$			;AND LOOP
4$:	TAB				;D0= CURRENT PARITY, D1= LAST PARITY
	LSRB
	ADCB	I,0			;"EOR" CURRENT AND LAST
	COMB				;D0 = 0 IF SOMETHING CHANGED
	STAB	X,SONAR-INPUT		;RESET RAMP ON CHANGE
	LDAB	E,OPTSEL
	LSRB
	LSRB
	ANDB	I,3			;GET TIME OPTION
	ADDB	I,'0
	STAB	E,SCREEN+0EF		;DISPLAY IT
	BRA	1$			;LOOP IN SWITCH TEST
BRAK:	.ASCII	/BAD RAM OK/
BROK:	.ASCII	/BAD ROM OK/
FILL	= 7FF8-.
	.REPT	FILL
	.BYTE	0
	.ENDR
	.WORD	INTEN,RESET,NMINT,RESET
	.=	NIOA
	.WORD	NMINT
	.=	IOVA
	.WORD	INTEN
	.=	RSTVCT
	.WORD	START
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       